const fs = require('fs');
const path = require('path');
const sourceMap = require('source-map');

// Directory containing .map files
const DIRECTORY_PATH = './maps';
const OUTPUT_DIRECTORY = './source-code';

// Function to ensure a directory exists
function ensureDirectoryExistence(filePath) {
    const dirname = path.dirname(filePath);
    if (!fs.existsSync(dirname)) {
        fs.mkdirSync(dirname, { recursive: true });
    }
}

// Function to process all .map files in the directory
async function processSourceMaps() {
    try {
        const files = fs.readdirSync(DIRECTORY_PATH);

        // Filter only .map files
        const mapFiles = files.filter(file => file.endsWith('.map'));

        if (mapFiles.length === 0) {
            console.log("No .map files found in the directory.");
            return;
        }

        for (const file of mapFiles) {
            const filePath = path.join(DIRECTORY_PATH, file);
            console.log(`\nProcessing: ${filePath}`);

            const rawSourceMap = JSON.parse(fs.readFileSync(filePath, 'utf8'));
            const consumer = await new sourceMap.SourceMapConsumer(rawSourceMap);

            consumer.sources.forEach((source) => {
                const originalCode = consumer.sourceContentFor(source);
                if (originalCode) {
                    // Preserve original folder structure
                    const outputFilePath = path.join(OUTPUT_DIRECTORY, source);

                    // Ensure directory exists before writing the file
                    ensureDirectoryExistence(outputFilePath);

                    // Save to the mapped-files directory with structure
                    fs.writeFileSync(outputFilePath, originalCode);
                    console.log(`✅ Saved: ${outputFilePath}`);
                } else {
                    console.log(`⚠️ No source content found for: ${source}`);
                }
            });

            consumer.destroy();
        }
    } catch (error) {
        console.error("❌ Error processing source maps:", error);
    }
}

// Run the function
processSourceMaps().catch(console.error);

