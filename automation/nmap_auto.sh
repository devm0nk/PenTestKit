#!/bin/bash


# --------------------------
# Configuration Variables
# --------------------------
ROOT_DIR="Nmap"

# Default concurrency settings
MAX_PORT_PROCESSES=5     # Maximum concurrent port scan processes
MAX_SERVICE_PROCESSES=5  # Maximum concurrent service scan processes

# Default values for options
RUN_LIVE_HOST=false
RUN_PORT_SCAN=false
RUN_SERVICE_SCAN=false
TARGETS=()
TARGET_FILE=""
USE_EXISTING=false
SCAN_TOP_PORTS=false  # For --top option
EXCLUDE_HOSTS=()
EXCLUDE_PORTS=""
MIN_RATE=""
MAX_RATE=""
OUTPUT_FORMAT="normal"  # Options: normal, xml, json

# --------------------------
# Function to display help
# --------------------------
display_help() {
    echo "Usage: sudo $0 [options]"
    echo
    echo "Options:"
    echo "  -l, --live-host               Run live host discovery scans"
    echo "  -p, --port-scan               Run port scans"
    echo "  -s, --service-scan            Run service scans"
    echo "  -e, --existing                Use existing live_hosts.txt without requiring targets"
    echo "  -t, --target <IP/subnet>      Specify target IP or subnet (can be used multiple times)"
    echo "  -f, --target-file <file>      Specify file with list of targets"
    echo "      --top                     Scan top 1000 ports instead of all ports"
    echo "  -o, --output-format <format>  Specify output format (normal, xml, json)"
    echo "  -x, --exclude <IP>            Exclude specific IP from scans (can be used multiple times)"
    echo "  -X, --exclude-ports <ports>   Exclude specific ports from scans (comma-separated)"
    echo "      --min-rate <rate>         Set the minimum rate (packets per second)"
    echo "      --max-rate <rate>         Set the maximum rate (packets per second)"
    echo "  -M, --max-port-processes <n>  Set maximum concurrent port scan processes (default: 5)"
    echo "  -S, --max-service-processes <n> Set maximum concurrent service scan processes (default: 5)"
    echo "  -c, --cleanup                 Remove all scan results"
    echo "  -h, --help                    Display this help message"
    echo
    echo "Examples:"
    echo "  sudo $0 -l -p -s -t 192.168.1.0/24"
    echo "  sudo $0 --port-scan --top --existing"
    echo "  sudo $0 --max-port-processes 10 --max-service-processes 8 -p -t 10.0.0.1/24"
    echo
    echo "Note:"
    echo "  Ensure you have permission to scan the specified IP addresses or subnets."
    exit 0
}

# --------------------------
# Function to sanitize target names for filenames
# --------------------------
sanitize_filename() {
    echo "$1" | tr '/.' '_'
}

# --------------------------
# Function to load targets from file or arguments
# --------------------------
load_targets() {
    # If a target file is provided, read targets from the file
    if [ -n "$TARGET_FILE" ]; then
        if [ ! -f "$TARGET_FILE" ]; then
            echo "Error: Target file '$TARGET_FILE' does not exist." >&2
            exit 1
        fi
        while IFS= read -r line; do
            # Ignore empty lines and comments
            if [[ -n "$line" && ! "$line" =~ ^# ]]; then
                TARGETS+=("$line")
            fi
        done < "$TARGET_FILE"
    fi

    # Check that at least one target is specified
    if [ ${#TARGETS[@]} -eq 0 ]; then
        echo "Error: No targets specified. Use -t <IP or subnet> or -f <filename>" >&2
        exit 1
    fi
}

# --------------------------
# Function to check if the script is run as root
# --------------------------
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo "Please run this script as root." >&2
        exit 1
    fi
}

# --------------------------
# Function to prepare directories
# --------------------------
prepare_directories() {
    mkdir -p "$ROOT_DIR/Live_Host"
    mkdir -p "$ROOT_DIR/Ports/tcp"
    mkdir -p "$ROOT_DIR/Ports/udp"
    mkdir -p "$ROOT_DIR/Services/tcp"
    mkdir -p "$ROOT_DIR/Services/udp"
}

# --------------------------
# Function to handle concurrency
# --------------------------
sem() {
    local max="$1"
    while (( $(jobs -rp | wc -l) >= max )); do
        sleep 0.1
    done
}

# --------------------------
# Function to run live host discovery scans
# --------------------------
run_live_host_scans() {
    echo "Starting live host discovery scans..."

    # Load targets
    load_targets

    if [ ${#TARGETS[@]} -eq 0 ]; then
        echo "No targets to scan. Exiting live host discovery."
        return
    fi

    for TARGET in "${TARGETS[@]}"; do
        TARGET_BASENAME=$(sanitize_filename "$TARGET")

        echo "Scanning target: $TARGET"

        # Run multiple ping scans in parallel for each target, saving .gnmap files
        nmap -vv -n -sn -PE -oG "$ROOT_DIR/Live_Host/live_hosts_icmp_echo_$TARGET_BASENAME.gnmap" "$TARGET" &
        nmap_pid1=$!
        nmap -vv -n -sn -PO -oG "$ROOT_DIR/Live_Host/live_hosts_icmp_proto_ping_$TARGET_BASENAME.gnmap" "$TARGET" &
        nmap_pid2=$!
        nmap -vv -n -sn -PP -oG "$ROOT_DIR/Live_Host/live_hosts_timestamp_ping_$TARGET_BASENAME.gnmap" "$TARGET" &
        nmap_pid3=$!
        nmap -vv -n -sn -PY132,2905 -oG "$ROOT_DIR/Live_Host/live_hosts_sctp_ping_$TARGET_BASENAME.gnmap" "$TARGET" &
        nmap_pid4=$!
        nmap -vv -n -Pn -sS --reason --open -T4 \
            -p20,21,22,23,25,53,67,68,69,80,88,110,119,123,135,137,138,139,143,161,162,179,194,263,389,443,445,465,500,514,541,587,902,993,995,1433,1434,1521,1700,1701,1723,1900,1935,2077,2078,2082,2083,2086,2087,2089,2091,2095,2096,3268,3306,3389,3478,3479,4353,4444,5000,5060,5061,5432,8080,8443,8447,8880,18191,18192,18210,27017 \
            -oA "$ROOT_DIR/Live_Host/tcp_live_hosts_$TARGET_BASENAME" "$TARGET" &
        nmap_pid5=$!
        nmap -vv -n -Pn -sU --reason --open -T4 --defeat-icmp-ratelimit \
            -p53,67,68,69,123,137,138,161,162,500,514,520,546,547,1194,1701,1723,1900,3478,3479,4500,5060,5061,5353,11211 \
            -oA "$ROOT_DIR/Live_Host/udp_live_hosts_$TARGET_BASENAME" "$TARGET" &
        nmap_pid6=$!

        # Wait for all background scans for this target to finish
        wait $nmap_pid1 $nmap_pid2 $nmap_pid3 $nmap_pid4 $nmap_pid5 $nmap_pid6
    done

    echo "Live host discovery scans completed."

    # Extract live hosts from the .gnmap files
    echo "Extracting live hosts..."

    LIVE_HOSTS_FILE="$ROOT_DIR/live_hosts.txt"
    > "$LIVE_HOSTS_FILE"

    # Parse all .gnmap files to extract IPs with status Up
    cat "$ROOT_DIR/Live_Host/"*.gnmap | grep 'Status: Up' | awk '{print $2}' | sort -V | uniq >> "$LIVE_HOSTS_FILE"

    # Remove duplicates and sort
    sort -u "$LIVE_HOSTS_FILE" -o "$LIVE_HOSTS_FILE"

    echo "Live hosts saved to $LIVE_HOSTS_FILE"
}

# --------------------------
# Function to run port scans
# --------------------------
run_port_scans() {
    echo "Starting port scans..."

    # Determine IPs to scan
    if [ "$USE_EXISTING" = true ] && [ -f "$ROOT_DIR/live_hosts.txt" ]; then
        mapfile -t IPs < "$ROOT_DIR/live_hosts.txt"
    else
        if [ -f "$ROOT_DIR/live_hosts.txt" ]; then
            mapfile -t IPs < "$ROOT_DIR/live_hosts.txt"
        else
            if [ "$RUN_LIVE_HOST" = false ]; then
                echo "Error: No live_hosts.txt found. Use -l to perform live host discovery." >&2
                exit 1
            else
                echo "Error: No live hosts found and no targets specified. Use -t or -f to provide targets." >&2
                exit 1
            fi
        fi
    fi

    # Exclude specified hosts
    if [ ${#EXCLUDE_HOSTS[@]} -gt 0 ]; then
        for ex_host in "${EXCLUDE_HOSTS[@]}"; do
            # Remove excluded host from IPs array
            IPs=("${IPs[@]/$ex_host}")
        done
    fi

    # Remove empty entries
    IPs=("${IPs[@]/#/}")
    IPs=("${IPs[@]/%/}")

    if [ ${#IPs[@]} -eq 0 ]; then
        echo "No IPs to scan. Exiting port scan."
        return
    fi

    # Set the port scan options based on --top
    if [ "$SCAN_TOP_PORTS" = true ]; then
        TCP_PORT_OPTION="--top-ports 1000"
        TCP_OUTPUT_PREFIX="tcp_ports_top1000"
    else
        TCP_PORT_OPTION="-p-"
        TCP_OUTPUT_PREFIX="tcp_ports_full"
    fi

    # Handle excluded ports
    if [ -n "$EXCLUDE_PORTS" ]; then
        TCP_PORT_OPTION+=" --exclude-ports $EXCLUDE_PORTS"
    fi

    # Handle output format
    case "$OUTPUT_FORMAT" in
        xml)
            NMAP_TCP_OUTPUT_OPTION="-oA"
            NMAP_UDP_OUTPUT_OPTION="-oA"
            ;;
        json)
            NMAP_TCP_OUTPUT_OPTION="-oA"
            NMAP_UDP_OUTPUT_OPTION="-oA"
            ;;
        *)
            NMAP_TCP_OUTPUT_OPTION="-oA"
            NMAP_UDP_OUTPUT_OPTION="-oA"
            ;;
    esac

    # Apply rate limiting options if set
    RATE_OPTIONS=""
    if [ -n "$MIN_RATE" ]; then
        RATE_OPTIONS+="--min-rate $MIN_RATE "
    fi
    if [ -n "$MAX_RATE" ]; then
        RATE_OPTIONS+="--max-rate $MAX_RATE "
    fi

    # Run TCP scans with concurrency control
    echo "Starting TCP scans..."
    for ip in "${IPs[@]}"; do
        sem "$MAX_PORT_PROCESSES"
        (
            if [[ "$ip" =~ : ]]; then
                nmap_ip="[$ip]"
            else
                nmap_ip="$ip"
            fi
            nmap -sS -n -Pn -vv $TCP_PORT_OPTION $RATE_OPTIONS --reason --open -T4 \
                $NMAP_TCP_OUTPUT_OPTION "$ROOT_DIR/Ports/tcp/${TCP_OUTPUT_PREFIX}_$(sanitize_filename "$ip")" "$nmap_ip"
        ) &
    done
    wait

    # Run UDP scans with concurrency control
    echo "Starting UDP scans..."
    for ip in "${IPs[@]}"; do
        sem "$MAX_PORT_PROCESSES"
        (
            if [[ "$ip" =~ : ]]; then
                nmap_ip="[$ip]"
            else
                nmap_ip="$ip"
            fi
            nmap -sU -n -Pn -vv --top-ports 1000 $RATE_OPTIONS --reason --open --defeat-icmp-ratelimit -T4 \
                $NMAP_UDP_OUTPUT_OPTION "$ROOT_DIR/Ports/udp/udp_ports_1000_$(sanitize_filename "$ip")" "$nmap_ip"
        ) &
    done
    wait

    echo "Port scans completed."
}

# --------------------------
# Function to process .gnmap files for service scans
# --------------------------
process_gnmap_file() {
    local gnmap_file="$1"
    local protocol="$2"  # 'tcp' or 'udp'
    local services_dir="$ROOT_DIR/Services/$protocol"

    # Extract IP from the .gnmap filename
    # Expected filename format:
    # - tcp_ports_full_<sanitized_ip>.gnmap
    # - tcp_ports_top1000_<sanitized_ip>.gnmap
    # - udp_ports_1000_<sanitized_ip>.gnmap
    local filename=$(basename "$gnmap_file")

    # Determine the prefix based on protocol and scan type
    if [ "$protocol" == "tcp" ]; then
        if [[ "$filename" == "tcp_ports_full_"* ]]; then
            prefix="tcp_ports_full_"
        elif [[ "$filename" == "tcp_ports_top1000_"* ]]; then
            prefix="tcp_ports_top1000_"
        else
            echo "Error: Could not extract IP from filename $filename" >&2
            return 1
        fi
    elif [ "$protocol" == "udp" ]; then
        if [[ "$filename" == "udp_ports_1000_"* ]]; then
            prefix="udp_ports_1000_"
        else
            echo "Error: Could not extract IP from filename $filename" >&2
            return 1
        fi
    else
        echo "Error: Unknown protocol $protocol" >&2
        return 1
    fi

    # Extract sanitized_ip from filename
    sanitized_ip="${filename#$prefix}"
    sanitized_ip="${sanitized_ip%.gnmap}"

    # Reconstruct IP
    ip="${sanitized_ip//_/.}"

    # Extract open ports from the .gnmap file
    # Example line in .gnmap:
    # Host: 192.168.1.1 () Ports: 22/open/tcp//ssh///,80/open/tcp//http///
    ports=$(grep -E "Ports: " "$gnmap_file" | awk -F'Ports: ' '{print $2}' | tr ',' '\n' | awk '/open/{print $1}' | cut -d '/' -f1 | sort -n | uniq | paste -sd, -)

    if [ -n "$ports" ]; then
        echo "Scanning $ip with ports $ports"

        if [ "$protocol" == "tcp" ]; then
            nmap_cmd=(nmap -sS -vv -n -A --osscan-guess --version-all -Pn -T4 -p"$ports" -oA "$services_dir/${protocol}_services_$sanitized_ip" "$ip")
        else
            nmap_cmd=(nmap -sU -vv -n -A -Pn -T4 -p"$ports" -oA "$services_dir/${protocol}_services_$sanitized_ip" "$ip")
        fi

        echo "Running: ${nmap_cmd[*]}"
        "${nmap_cmd[@]}"
    else
        echo "No open $protocol ports found for $ip in $gnmap_file"
    fi
}

# --------------------------
# Function to run service scans
# --------------------------
run_service_scans() {
    echo "Starting detailed service scans..."

    # Determine if port scan results exist
    tcp_gnmap_files=("$ROOT_DIR/Ports/tcp/"*.gnmap)
    udp_gnmap_files=("$ROOT_DIR/Ports/udp/"*.gnmap)

    if [ "$USE_EXISTING" = false ] && [ ${#tcp_gnmap_files[@]} -eq 0 ] && [ ${#udp_gnmap_files[@]} -eq 0 ]; then
        echo "No port scan results found. Please run port scans first or use -e to use existing results." >&2
        exit 1
    fi

    # Process TCP .gnmap files
    if [ ${#tcp_gnmap_files[@]} -gt 0 ]; then
        echo "Processing TCP .gnmap files..."
        for gnmap_file in "${tcp_gnmap_files[@]}"; do
            [ -e "$gnmap_file" ] || continue
            sem "$MAX_SERVICE_PROCESSES"
            (
                process_gnmap_file "$gnmap_file" "tcp"
            ) &
        done
        wait
    else
        echo "No TCP .gnmap files found to process."
    fi

    # Process UDP .gnmap files
    if [ ${#udp_gnmap_files[@]} -gt 0 ]; then
        echo "Processing UDP .gnmap files..."
        for gnmap_file in "${udp_gnmap_files[@]}"; do
            [ -e "$gnmap_file" ] || continue
            sem "$MAX_SERVICE_PROCESSES"
            (
                process_gnmap_file "$gnmap_file" "udp"
            ) &
        done
        wait
    else
        echo "No UDP .gnmap files found to process."
    fi

    echo "Detailed service scans completed."
}

# --------------------------
# Function to cleanup scan results
# --------------------------
cleanup() {
    read -p "Are you sure you want to remove all scan results? [y/N]: " response
    case "$response" in
        [yY][eE][sS]|[yY])
            rm -rf "$ROOT_DIR"
            echo "All scan results have been removed."
            exit 0
            ;;
        *)
            echo "Cleanup aborted."
            exit 0
            ;;
    esac
}

# --------------------------
# Function to parse command line arguments
# --------------------------
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        key="$1"
        case $key in
            -l|--live-host)
                RUN_LIVE_HOST=true
                shift
                ;;
            -p|--port-scan)
                RUN_PORT_SCAN=true
                shift
                ;;
            -s|--service-scan)
                RUN_SERVICE_SCAN=true
                shift
                ;;
            -e|--existing)
                USE_EXISTING=true
                shift
                ;;
            -t|--target)
                if [[ -n "$2" && "$2" != -* ]]; then
                    TARGETS+=("$2")
                    shift 2
                else
                    echo "Error: --target requires an argument." >&2
                    exit 1
                fi
                ;;
            -f|--target-file)
                if [[ -n "$2" && "$2" != -* ]]; then
                    TARGET_FILE="$2"
                    shift 2
                else
                    echo "Error: --target-file requires an argument." >&2
                    exit 1
                fi
                ;;
            --top)
                SCAN_TOP_PORTS=true
                shift
                ;;
            -o|--output-format)
                if [[ -n "$2" && "$2" != -* ]]; then
                    case "$2" in
                        normal|xml|json)
                            OUTPUT_FORMAT="$2"
                            ;;
                        *)
                            echo "Error: Invalid output format '$2'. Choose from normal, xml, json." >&2
                            exit 1
                            ;;
                    esac
                    shift 2
                else
                    echo "Error: --output-format requires an argument." >&2
                    exit 1
                fi
                ;;
            -x|--exclude)
                if [[ -n "$2" && "$2" != -* ]]; then
                    EXCLUDE_HOSTS+=("$2")
                    shift 2
                else
                    echo "Error: --exclude requires an argument." >&2
                    exit 1
                fi
                ;;
            -X|--exclude-ports)
                if [[ -n "$2" && "$2" != -* ]]; then
                    EXCLUDE_PORTS="$2"
                    shift 2
                else
                    echo "Error: --exclude-ports requires an argument." >&2
                    exit 1
                fi
                ;;
            --min-rate)
                if [[ -n "$2" && "$2" =~ ^[0-9]+$ ]]; then
                    MIN_RATE="$2"
                    shift 2
                else
                    echo "Error: --min-rate requires a numeric argument." >&2
                    exit 1
                fi
                ;;
            --max-rate)
                if [[ -n "$2" && "$2" =~ ^[0-9]+$ ]]; then
                    MAX_RATE="$2"
                    shift 2
                else
                    echo "Error: --max-rate requires a numeric argument." >&2
                    exit 1
                fi
                ;;
            -M|--max-port-processes)
                if [[ -n "$2" && "$2" =~ ^[1-9][0-9]*$ ]]; then
                    MAX_PORT_PROCESSES="$2"
                    shift 2
                else
                    echo "Error: --max-port-processes requires a positive integer." >&2
                    exit 1
                fi
                ;;
            -S|--max-service-processes)
                if [[ -n "$2" && "$2" =~ ^[1-9][0-9]*$ ]]; then
                    MAX_SERVICE_PROCESSES="$2"
                    shift 2
                else
                    echo "Error: --max-service-processes requires a positive integer." >&2
                    exit 1
                fi
                ;;
            -c|--cleanup)
                echo "Cleaning up all scan results..."
                cleanup
                ;;
            -h|--help)
                display_help
                ;;
            *)
                echo "Unknown option: $1" >&2
                display_help
                ;;
        esac
    done
}

# --------------------------
# Main Execution Flow
# --------------------------

main() {
    # Check if the script is run as root
    check_root

    # Prepare necessary directories
    prepare_directories

    # Parse command line arguments
    parse_arguments "$@"

    # Execute the selected scans
    if [ "$RUN_LIVE_HOST" = true ]; then
        run_live_host_scans
    fi

    if [ "$RUN_PORT_SCAN" = true ]; then
        run_port_scans
    fi

    if [ "$RUN_SERVICE_SCAN" = true ]; then
        run_service_scans
    fi

    exit 0
}

# --------------------------
# Execute the main function
# --------------------------
main "$@"
