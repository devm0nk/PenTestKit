#!/bin/bash

if [[ $EUID -ne 0 ]]; then
    echo 'Please run this script as root.' 1>&2
    exit 1
fi

RUN_LIVE_HOST=false
RUN_PORT_SCAN=false
RUN_SERVICE_SCAN=false
TARGETS=()
TARGET_FILE=""

MAX_PORT_PROCESSES=5     # Maximum number of concurrent port scan processes
MAX_SERVICE_PROCESSES=5  # Maximum number of concurrent service scan processes

display_help() {
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  -l, --live-host           Run live host discovery scans"
    echo "  -p, --port-scan           Run port scans"
    echo "  -s, --service-scan        Run service scans"
    echo "  -t, --target <IP/subnet>  Specify target IP or subnet (can be used multiple times)"
    echo "  -f, --target-file <file>  Specify file with list of targets"
    echo "  -h, --help                Display this help message"
    echo
    echo "Examples:"
    echo "  sudo $0 -l -p -s -t 192.168.1.0/24"
    echo "  sudo $0 --port-scan --target-file targets.txt"
    echo
    echo "Note:"
    echo "  Ensure you have permission to scan the specified IP addresses or subnets."
    exit 0
}

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -l|--live-host)
            RUN_LIVE_HOST=true
            shift
            ;;
        -p|--port-scan)
            RUN_PORT_SCAN=true
            shift
            ;;
        -s|--service-scan)
            RUN_SERVICE_SCAN=true
            shift
            ;;
        -t|--target)
            if [[ -n "$2" && "$2" != -* ]]; then
                TARGETS+=("$2")
                shift
            else
                echo "Error: --target requires an argument."
                exit 1
            fi
            shift
            ;;
        -f|--target-file)
            if [[ -n "$2" && "$2" != -* ]]; then
                TARGET_FILE="$2"
                shift
            else
                echo "Error: --target-file requires an argument."
                exit 1
            fi
            shift
            ;;
        -h|--help)
            display_help
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use -h or --help for usage information."
            exit 1
            ;;
    esac
done

if [ ${#TARGETS[@]} -eq 0 ] && [ -z "$TARGET_FILE" ]; then
    echo "Error: No targets specified. Use -t <IP or subnet> or -f <filename>"
    exit 1
fi

if [ -n "$TARGET_FILE" ]; then
    if [ ! -f "$TARGET_FILE" ]; then
        echo "Error: Target file '$TARGET_FILE' does not exist."
        exit 1
    fi
    while IFS= read -r line; do
        if [[ -n "$line" && ! "$line" =~ ^# ]]; then
            TARGETS+=("$line")
        fi
    done < "$TARGET_FILE"
fi

ROOT_DIR="nmap"

mkdir -p "$ROOT_DIR/Live_Host"
mkdir -p "$ROOT_DIR/Ports/tcp"
mkdir -p "$ROOT_DIR/Ports/udp"
mkdir -p "$ROOT_DIR/Services/tcp"
mkdir -p "$ROOT_DIR/Services/udp"

sanitize_filename() {
    echo "$1" | tr './' '_'
}

run_live_host_scans() {
    echo "Starting live host discovery scans..."

    for TARGET in "${TARGETS[@]}"; do
        TARGET_BASENAME=$(sanitize_filename "$TARGET")

        nmap -vv -n -sn -PE -oA "$ROOT_DIR/Live_Host/live_hosts_icmp_echo_$TARGET_BASENAME" "$TARGET"
        nmap -vv -n -sn -PO -oA "$ROOT_DIR/Live_Host/live_hosts_icmp_proto_ping_$TARGET_BASENAME" "$TARGET"
        nmap -vv -n -sn -PP -oA "$ROOT_DIR/Live_Host/live_hosts_timestamp_$TARGET_BASENAME" "$TARGET"
        nmap -vv -n -sn -PY132,2905 -oA "$ROOT_DIR/Live_Host/live_hosts_sctp_$TARGET_BASENAME" "$TARGET"
        nmap -vv -n -Pn -sS --reason --open -T4 -p20,21,22,23,25,53,67,68,69,80,88,110,119,123,135,137,138,139,143,161,162,179,194,263,389,443,445,465,500,514,541,587,902,993,995,1433,1434,1521,1700,1701,1723,1900,1935,2077,2078,2082,2083,2086,2087,2089,2091,2095,2096,3268,3306,3389,3478,3479,4353,4444,5000,5060,5061,5432,8080,8443,8447,8880,18191,18192,18210,27017 -oA "$ROOT_DIR/Live_Host/tcp_live_hosts_$TARGET_BASENAME" "$TARGET"
        nmap -vv -n -Pn -sU --reason --open -T4 --defeat-icmp-ratelimit -p53,67,68,69,123,137,138,161,162,500,514,520,546,547,1194,1701,1723,1900,3478,3479,4500,5060,5061,5353,11211 -oA "$ROOT_DIR/Live_Host/udp_live_hosts_$TARGET_BASENAME" "$TARGET"
    done

    echo "Live host discovery scans completed."

    echo "Extracting live hosts..."

    LIVE_HOSTS_FILE="$ROOT_DIR/live_hosts.txt"
    touch "$LIVE_HOSTS_FILE"

    for gnmap_file in "$ROOT_DIR/Live_Host/"*.gnmap; do
        grep "Status: Up" "$gnmap_file" | awk '/Host: / {print $2}' >> "$LIVE_HOSTS_FILE"
    done

    sort -u "$LIVE_HOSTS_FILE" -o "$LIVE_HOSTS_FILE"

    echo "Live hosts saved to $LIVE_HOSTS_FILE"
}

run_port_scans() {
    echo "Starting port scans..."

    if [ -f "$ROOT_DIR/live_hosts.txt" ]; then
        mapfile -t IPs < "$ROOT_DIR/live_hosts.txt"
    else
        IPs=("${TARGETS[@]}")
    fi

    echo "Starting TCP scans..."
    i=0
    for ip in "${IPs[@]}"; do
        ((i=i%MAX_PORT_PROCESSES)); ((i++==0)) && wait
        nmap -sS -n -Pn -vv -p- --reason --open -T4 -oA "$ROOT_DIR/Ports/tcp/tcp_ports_full_$(sanitize_filename "$ip")" "$ip" &
    done
    wait

    echo "Starting UDP scans..."
    i=0
    for ip in "${IPs[@]}"; do
        ((i=i%MAX_PORT_PROCESSES)); ((i++==0)) && wait
        nmap -sU -n -Pn -vv --top-ports 1000 --reason --open --defeat-icmp-ratelimit -T4 -oA "$ROOT_DIR/Ports/udp/udp_ports_1000_$(sanitize_filename "$ip")" "$ip" &
    done
    wait

    echo "Port scans completed."
}

process_nmap_file() {
    local nmap_file="$1"
    local protocol="$2" 
    local nmap_options_tcp="-sS -vv -n -A --osscan-guess --version-all -Pn -T4"
    local nmap_options_udp="-sU -sV -vv -A -O"
    local services_dir="$ROOT_DIR/Services/$protocol"

    local ip=$(basename "$nmap_file" | sed -E "s/.*_([a-zA-Z0-9_]+)\.nmap/\1/" | tr '_' '.')

    ports=$(awk -v protocol="$protocol" '
    /^[0-9]+\/(tcp|udp)/ {
        split($1, port_proto, "/")
        if (port_proto[2] == protocol && $2 == "open") {
            ports[port_proto[1]]
        }
    }
    END {
        for (p in ports) {
            printf("%s,", p)
        }
    }
    ' "$nmap_file" | sed 's/,$//')

    if [ -n "$ports" ]; then
        echo "Scanning $ip with ports $ports"

        if [ "$protocol" == "tcp" ]; then
            nmap_cmd="nmap $nmap_options_tcp -p$ports -oA $services_dir/${protocol}_services_$(sanitize_filename "$ip") $ip"
        else
            nmap_cmd="nmap $nmap_options_udp -p$ports -oA $services_dir/${protocol}_services_$(sanitize_filename "$ip") $ip"
        fi

        echo "Running: $nmap_cmd"
        $nmap_cmd
    else
        echo "No open $protocol ports found for $ip in $nmap_file"
    fi
}

run_service_scans() {
    echo "Starting detailed service scans..."

    echo "Processing TCP .nmap files..."
    i=0
    for nmap_file in "$ROOT_DIR/Ports/tcp/"*.nmap; do
        [ -e "$nmap_file" ] || continue  # Skip if no files
        ((i=i%MAX_SERVICE_PROCESSES)); ((i++==0)) && wait
        process_nmap_file "$nmap_file" "tcp" &
    done
    wait

    echo "Processing UDP .nmap files..."
    i=0
    for nmap_file in "$ROOT_DIR/Ports/udp/"*.nmap; do
        [ -e "$nmap_file" ] || continue  # Skip if no files
        ((i=i%MAX_SERVICE_PROCESSES)); ((i++==0)) && wait
        process_nmap_file "$nmap_file" "udp" &
    done
    wait

    echo "Detailed service scans completed."
}

if [ "$RUN_LIVE_HOST" = true ]; then
    run_live_host_scans
fi

if [ "$RUN_PORT_SCAN" = true ]; then
    run_port_scans
fi

if [ "$RUN_SERVICE_SCAN" = true ]; then
    run_service_scans
fi
